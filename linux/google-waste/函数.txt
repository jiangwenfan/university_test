函数

定义函数要使用def语句：
    def 函数名(参数1，参数2):
        函数体

    def nop():
        pass

调用函数：
    函数名(参数)
    

pass语句：pass其实为占位符,保证代码能够运行起来。




比较：【变量名+print == print 】
def my_abs1(x):
    if x>=0:
        return x
    else:
        return -x
函数体中有return语句，必须得有【变量接收（或者）print()语句】返回值。否则直接调用无法显示出来。【特指在程序中，但是在交互框中可以显示出来】	
#return:  必须接收返回值：（变量，print）；或者（print）
def my_abs2(x):
    if x>=0:
        print(x)
    else:
        print(-x)



	 
eg:求绝对值my_abs函数
def my_abs(x):
	if x>=0:
		return x
	else:
		return -x
把这个my_abs函数定义保存在text.py文件了。那么可以在解释器中，用from 【text】 import 【my_abs】来导入函数。
导入函数：from 【文件名】 import 【(文件中的)函数名】 
内置的函数有参数检查功能(个数和类型错误)，定义的函数(只能检查个数错误)
进阶版：
要求：对参数类型做出检查，只允许int和float类型的参数。数据类型检查可以用内置函数isinstance()实现。
def my_abs(x):
	if not isinstance(x,(int,float)):
		raise TypeError('bad operand type')
	if x>=0:
		return x
	else:
		return -x
my_abs('abc')
返回多个值：但这其实只是一种假象，Python返回的任然是单一的值，只不过这个值是tuple。只是按位置赋给对应的值，所以才看起来像返回多个值。
NO.1：
import math    #表示导入math包，并允许后续代码引用包里的sin,cos等函数。
def move(x,y,step,angle=0):
    nx=x+step*math.cos(angle)
    ny=y-step*math.sin(angle)
    return nx,ny
	
x,y=move(100,100,60,math.pi/6)
print(x,y)
NO.2：但是在语法上一个tuple可以省略括号，而多个变量可以同时接收一个tuple,按位置赋给对应的值，所以返回的多值其实就是一个tuple。
r=move(100,100,60,math.pi/6)
print(r)


函数及调用：
调用：知道函数的名称(函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数名起了一个‘别名’)
和参数(参数的数量和类型)
eg:
a=abs #变量a指向abs函数
a(-1) #也可以通过a调用abs函数。
求绝对值函数（参数只有一个）：abs()
求最大值函数（参数任意多个>=2个，只返回最大的）：max()
帮助函数，查看所传函数的详细信息（参数只有一个）：help()
NO.2:
数据类型的转换：
把其他类型转换为整数：int()
str--->int   int('123')
int--->str    str(100)
float--->int   int(12.34)
str--->float  float('12.34')
float--->str   str(1.23)
布尔值：
非0为真(True)
bool(1) --->True
bool(2) ---->True
bool(0) ---->False
非0：
str:    bool('0') --->True  
		bool('1') ----> True
		bool('2') --->True 
int:    bool(1) --->True
        bool(2) ---->True
float: bool(1.23) --->True
       bool(2.56) ---->True
0:  
int:        bool(0) ---->False
空值类型:   bool('') --->False
            bool() ---->False


1.获取当前工作目录 [os.getcwd]
	#1.py
	import os
	curdir=os.getcwd()
	print(curdir)

	>:/hone/tony/tets/11