NFS服务概述：
NFS(Network File System),即网络文件系统,linux/unix用户直接共享目录和文件。
C/S模式。client端挂载server端的共享目录。
centos7以NFSv4作为默认版本,是tcp协议,端口2049和NFS服务建立连接。

server端安装：
yum -y install nfs-utils #rpcbind通常都安装了
ls /etc/exports #配置文件
#vim /etc/services #查看端口号，2049

systemctl start nfs-server #启动服务
#systemctl start rpcbind通常被附带启动了
netstat -anpt |grep 2049#查看端口是否开放
#netstat -anptu |grep 2049
systemctl enable nfs-server #配置开机启动
#chkconfig nfs-server on 

vim /etc/exports #修改配置文件,共享目录。
	/opt/test *(rw) #共享/opt/test目录,*表示对所有网段开放权限,rw表示可读写
#ls -lh /opt/test #查看该目录的权限
#grep nfs /etc/passwd #查看nfsbody
chmod 777 -R /opt/test #nfs默认使用nfsnobody用户,所以可能权限不够，无法使用。
#chown nfsnobody.nfsnobody -R /media/
exportfs -rv #重新读取配置文件，不中断服务。

client端安装：
#showmount -e nfs服务器ip #查看服务器共享了那些目录
showmount -e 192.168.1.200
mount -t nfs 192.168.1.200:/opt/test/ /opt/ #挂载共享目录
#mount 192.168.1.200:/tmp /opt 
df -h #查看挂载的共享 
touch /opt/test/a.txt #验证写入权限

vim /etc/fstab #设置开机自动挂载
	192.168.1.200:/opt/test /opt/test nfs defaults 0 0 
	


下面是一些NFS共享的常用参数： 
 ro                    只读访问 
 rw                   读写访问 
 sync               资料同步写入到内存与硬盘当中
 async             资料会先暂存于内存当中，而非直接写入硬盘 
 secure             NFS通过1024以下的安全TCP/IP端口发送 
 insecure          NFS通过1024以上的端口发送 
 wdelay            如果多个用户要写入NFS目录，则归组写入（默认） 
 no_wdelay      如果多个用户要写入NFS目录，则立即写入，当使用async时，无需此设置。 
 Hide                在NFS共享目录中不共享其子目录 
 no_hide           共享NFS目录的子目录 
 subtree_check   如果共享/usr/bin之类的子目录时，强制NFS检查父目录的权限（默认） 
 no_subtree_check   和上面相对，不检查父目录权限 
 all_squash               共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 
 no_all_squash         保留共享文件的UID和GID（默认） 
 root_squash             root用户的所有请求映射成如anonymous用户一样的权限（默认） 
 no_root_squash        root用户具有根目录的完全管理访问权限 

 [root@xue63 a]# cat /etc/exports
/tmp/a/no_root_squash      *(rw,no_root_squash)
/tmp/a/sync               192.168.0.0/24(rw,sync)
/tmp/a/ro                  192.168.1.64(ro)
/tmp/a/all_squash             192.168.0.0/24(rw,all_squash,anonuid=500,anongid=500)
/tmp/a/async                    192.168.3.0/255.255.255.0(async)
/tmp/a/rw          192.168.3.0/255.255.255.0(rw)    192.168.4.0/255.255.255.0(rw)
/tmp/a/root_squash   *(rw,root_squash)    

注意：在发布共享目录的格式中除了共享目录是必跟参数外，其他参数都是可选的。并且共享
目录与客户端之间及客户端与客户端之间需要使用空格符号，但是客户端与参数之间是不能有
空格的

高级优化:
NFS客户端挂载参数的优化:
NFS高并发环境下的服务端重要优化(mount -o 参数）

async 异步同步，此参数会提高I/O性能，但会降低数据安全（除非对性能要求很高，对数据可靠性不要求的场合。一般生产环境，不推荐使用）

noatime 取消更新文件系统上的inode访问时间,提升I/O性能，优化I/O目的，推荐使用。

nodiratime 取消更新文件系统上的directory inode访问时间，高并发环境，推荐显式应用该选项，提高系统性能

intr：可以中断不成功的挂载

rsize/wsize 读取（rsize）/写入（wsize）的区块大小（block size），这个设置值可以影响客户端与服
务端传输数据的缓冲存储量。一般来说，如果在局域网内，并且客户端与服务端都具有足够的内存，这个
值可以设置大一点，比如说32768（bytes）,提升缓冲区块将可提升NFS文件系统的传输能力。但设置的值也不要太大，最好是实现网络能够传输的最大值为限。

内核优化：

net.core.wmem_default = 8388608     #内核默认读缓存
net.core.rmem_default = 8388608      #内核默认写缓存
net.core.rmem_max = 16777216        #内核最大读缓存
net.core.wmem_max = 16777216	   #内核最大写缓存

用法:
mount -t nfs -o noatime,nodiratime,rsize=131072,wsize=131072,intr 192.168.0.63:/backup/NFS  /mnt

或者写到挂载文件里:
192.168.0.63:/backup/NFS /mnt nfs       noatime,nodiratime,rsize=131072,wsize=131072,intr 0 0



服务的启动与关闭：
	netstat -antup |grep 2049
	service nfs start #开启服务
	chkconfig nfs on #开机启动

客户端实战：
	showmount  -e nfs_ip #查看共享的内容
		showmount -e 192.168.201.23  #会列出共享的文件和内容。
	mount 192.168.1.63:/tmp/a /mnt/ #挂载目标文件a到mnt目录下。挂载
server实战：共享media目录。
	vim /etc/exports
		/media  *(rw)   ###共享media目录，权限是：读写
	services nfs restart 
【2】
	ll -d /media/ #显示只有root有读写权限。
	chmod 777 /media/ #任何人都可以读写。

	ls /media/  #显示出了刚才添加的内容。

	ll  /media/ #显示这两个文件都属于nfsnobody用户。

client:
	showmount -e 192.168.1.63 #显示*,说明，任何网段都可以访问。
	mount  192.168.1.63:/media  /opt/  #挂载
	mount #查看已挂载的内容
	touch /opt/a.txt  #显示权限不足，创建失败。
【2】touch /opt/a.txt  #创建成功
	cp /etc/passwd ./  #成功复制到当前目录。
	cd /opt/
	ll  #发现这两个文件都是属于nfsnobody用户。
	whoami  #当前用户是root，创建完的文件，确实属于nfsnobody
[3]
	开机自动挂载nfs文件系统：
	vim /etc/fstab
		192.168.1.63:/meida   /opt  nfs  defaults  0 0 
	测试：umount /opt/  #卸载
	mount  -a
	ls /opt/ #会显示两个文件成功。

NFS配置文件参数详解：
对共享参数做一些特殊的处理：
vim /etc/exports  #只有共享目录的格式是必须的参数，其他都是可选的。
	/tmp/a/no_root_squash  *(rw,no_root_squash)  
		#创建一个a目录和一个no_root_squash目录。 
		#no_root_squash 不压制root,root创建完之后还是root。如果用root登录nfs,其身份就是root.
	/tmp/a/sync  192.168.1.0/24(rw,sync)
		#sync 立即同步数据。
		#只让1.0这个网段访问。
	/tmp/a/ro   192.168.1.64(ro)
		#ro 只读
		#只让1.64这个IP访问。
	/tmp/a/all_squash  *.baidu.com(rw,all_squash,anonuid=500,anongid=500)
		#只让baidu.com这个域里面的机器访问。
		#手动指定匿名uid。。all_squash:用户登录nfs时，指定身份为UID/GID的用户。
	/tmp/a/async    102.168.3.0/255.255.255.0(async)
		#async  #异步数据。
		#同步与异步扫盲：
			##同步:写一个字符，同步一次，交互频繁，交互量小。
			##异步:写一堆字符，同步一次，交互次数少，交互量大。
	/tmp/a/rw	192.168.3.0/255.255.255.0(rw)  192.168.4.0/255.255.255.0(rw)
	/tmp/a/root_squash *(rw,root_squash)
		#root_squash 默认压制root。root创建完之后，文件显示由nfs这个用户创建的。如果使用root登录nfs，使其身份自动换成nfsnobody。

实列：
[server]
mkdir /tmp/a
cd /tmp/a
mkdir all_squash  async no_root_squash ro root_squash rw sync 
cdmod 777  -R /tmp/a 
vim /etc/exports
	复制上面的参数。。。
	。。。。
	。。。。
	。。。。
service nfs restart
【2】
useradd mk  ##id mk
[.....]
[client]
showmount -e 192.168.1.63(server_ip)  #显示所有共享的目录。
##umount /opt/  #取消opt下面的挂载。
mount 192.168.1.63:/tmp/a/no_root_squash  /opt/  #挂载不压制的目录。
touch /opt/no_root-squash.txt  #创建文件。
ll  !$ #查看内容。显示该文件的所有者和属组是root。在server端查看，和这儿是一样的。


将远程计算机磁盘挂载到本地，像本地磁盘一样操作。

centos6.x
rpc主程序:rpcbind
nfs主程序:nfs-utils

主要配置文件: /etc/exports #可能不存在


NFS 仅能让 Unix 机器沟通， CIFS 只能让 Windows 机器沟通
