类属性
1.设计类
2.在__init__中定义对象的属性,在类中定义对象的方法,比如传入self参数
3.使用类名创建对象有两步:
1).在内存中为对象分配空间
2).调用初始化方法__init__为对象初始化
创建多个对象，每个对象不会有不同的属性,但是方法是公用的,每个对象传入自己的对象引用传入给方法的self参数,这样就可以在方法内部访问到
调用方法的对象的属性和方法。
创建出来的对象叫做类的实例，创建对象的动作叫做实例化,对象的属性叫做实例属性,对象的方法叫做实例方法。
每一个对象都有自己独立的内存空间,保存各自不同的属性，多个对象的方法,在内存中只有一份,在调用方法时,需要把对象引用传递到方法内部。

在python中一切皆对象,类是一个特殊的对象。
class A(object):
	pass
#定义的类属于类对象
obj1 = A()
#属于实例对象

在程序允许时,类同样会被加载到内存中去,类是一个特殊的对象。
类中保存的是对象的实例方法，几个对象共有。对象内存空间中保存的是对象自己的实例属性。
在程序运行时,类对象在内存中只有一份,使用一个类可以创建出很多对象实例。
除了封装实例的属性和方法外,类对象还可以拥有自己的属性和方法。类对象的属性叫做类属性，类对象的方法叫做类方法。
类属性和类方法是该类的所有对象共享，通过类名直接访问。调用方式:类名.属性名； 类名.方法名

类属性的定义:
class Tool(object):
	#类属性。记录由该类产生对象的个数。类属性通常是记录类相关的特征。
	count = 0
	def __init__(self):
		Tool.count += 1 #每次创建对象加1
t = Tool()
t2 = Tool()

print(Tool.count) #调用类属性[通过类访问，推荐]
print(t.count) #通过对象访问。[不推荐,]首先在对象内存空间中找，找不到的话,在类中找,向上查找。

t.count = 99 #t对象内没有这个实例属性，并不会向上查找,就会添加一个临时的count属性。
print(t.count)
#此时这个显示的就是对象的实例属性而不是类的属性。
print(Tool.count) #但是并没有修改到类属性的值。

类方法的定义:
@classmethod #类方法需要用这个标识来修饰,告诉解释器这是一个类方法。
def 类方法名(cls): #类方法的第一个参数必须是cls。表示由哪一个类调用的方法，方法内的cls就是哪一个类的引用。
	#换成其他也可以，习惯使用cls。
	pass
通过类名.方法名调用类方法，不需要传递cls参数。在方法内部可以通过cls.访问其他类属性和cls.调用其他类方法。

class Tool(object):
	count = 0  #类属性。统计创建对象的个数
	@classmethod 
	def show_tool_count(cls):
		print("创建对象的个数: %d"%cls.count) #通过cls.调用类属性。
	def __init__(self):
		Tool.count += 1 #在类方法外部，只能通过类名访问类属性和类方法

t = Tool()
t2 = Tool()

Tool.show_tool_count() #调用类方法