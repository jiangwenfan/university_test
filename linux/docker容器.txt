# docker容器的使用
* ## 查看容器
```bash
docker ps  #列出当前正在运行的容器
	-a  #可以看到本机存在的所以容器。
	-q	#只显示容器id
	--no-trunc #显示完整命令信息，不截断。
 	-l #显示上一个运行的容器
 	-n 3 #显示上3个运行的容器
 	
docker top 容器id  #查看容器内进程
docker inspect 容器id  #查看容器内部细节
docker exec -it 容器id ls -l /tmp  #在容器外面执行一次性命令
```
* ## 创建容器
##### 新建并启动交互式容器;
```bash
docker run -it  centos  #运行一个container并加载镜像centos
	  	-i  #以交互模式运行容器，通常与-t 同时使用；
		-t  #为容器重新分配一个伪输入终端，通常与-i同时使用。
		--name #参数为容器指定名字。
			eg: docker run -it --name c7 centos  #新建并启动名为c7的交互式容器。
```
##### 以守护进程的形式启动容器
```bash
docker run -d centos /bin/bash -c "while true;do echo hello word; sleep 1;done"  #在container中启动一个长久运行的进程，不断向stdin输出hello world。模拟一个后台运行的服务。
 		-d #后台运行容器，并返回容器的完整ID；
		-c #后面跟待完成的命令。		
```
* ## 删除容器
```bash
docker rm 容器id  #删除容器;删除前得容器得停止。
		-f #强制删除容器，不用停止。		# docker rm -f 容器id   
```
* ## 启动_停止容器
```bash
exit  #退出容器，且关闭容器。
ctrl+P+Q #只退出容器。

docker  start  容器id  #启动容器
		stop #停止容器
 		restart  #重新启动容器
 		kill  #强制停止容器
```
* ## 进入容器
```bash
docker exec -it 容器id /bin/bash #以交互命令行的方式进入正在运行的容器。
	--user root #以root的形式进入容器。
		#docker exec -it --user root Container_ID /bin/bash 
	#关闭防火墙报错的 
docker exec -it 容器id ls -l /tmp  #在容器外面执行一次性命令

#docker attach 容器id  #忘记他吧，很少用。
```
* ## 生成镜像_导出为tar文件_导入为image
```bash
docker commit  容器id  new_images  #根据容器创建新的镜像。new_images新的镜像名
		-m "update_one"  #提交信息
		-a "jwf"  #作者
		
docker save -o 镜像名.tar  images	#把镜像导出为tar文件
docker load -i 镜像名.tar  #把tar文件导入为image
```
* ## 查看容器日志
```bash
docker logs 容器id/容器名  #查看该容器的日志信息。
  		#docker logs c43947834374  从一个容器中取日志，查看输出内容。
```
* ## 容器与宿主机cp文件
```bash
docker cp 容器id:容器内路径 宿主机路径		#从容器内拷贝文件到宿主机上
		#docker cp 102323237:/etc/ssh/sshd_config	/root
```