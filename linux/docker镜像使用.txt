docker镜像的使用：

docker images #列出本地镜像
		#-q 参数只显示id	
docker search ubuntu  #从docker hub中搜索与ubuntu有关的镜像。
docker  pull ubuntu #从docker hub中拉取最新的镜像；默认是buntu:latest	 
docker rmi tomcat 	#删除本地镜像；	=> docker image rm tomcat
	    #当有该镜像创建的容器存在时，镜像文件默认是无法删除的。 
	    #即使容器已经退出了，但是没有删除，也是无法删除镜像的。
docker rmi centos  #删除镜像；但是没有任何容器依赖时。
		-f  #忽略容器依赖，强制删除
docker rmi  -f ubuntu  #强制删除镜像，无视容器的存在。【不推荐】
docker image prune -f  #自动清理临时的遗留镜像文件层。      

docker inspect ubuntu    #查看ubuntu镜像的详细信息。

docker history ubuntu  	#查看镜像每一层的具体内容每一层由于命令太长字段，截断。
docker history ubuntu  --no-trunc	#不截断命令。

docker tag vulhub/libssh:0.8.1 21703  #给vluhub/libssh:0.8.1镜像创建一个名为21703的快捷方式。使用tag命令添加镜像标签。
#两个image的id是一样的，所以21703镜像是vulhub/libssh镜像的快捷方式。


		
1.使用标签删除镜像
先会删除标签，当标签全部删除完之后，才会删除镜像。

docker images
#centos7             latest              0f3e07c0138f        2 months ago        220MB
#centos              latest              0f3e07c0138f        2 months ago        220MB
docker tag centos centos7 #给centos镜像创建一个标签centos7
docker rmi centos7 #删除Centos7这个标签，并不会删除centos7这个镜像。
docker rmi centos  #删除centos标签，并且删除centos镜像。

2.使用镜像ID删除镜像。【一步到位，直接删除】
先会删除所有标签，然后删除镜像。

docker  rmi    0f3e07c0138f

3.使用Docker 一 段时间后, 系统中可能会遗留一些临时的镜像文件, 以及 一 些没有被使
用的镜像, 可以通过docker image prune命令来进行清理。
docker image prune #清楚临时镜像文件
			-a	#【无用镜像+无用标签】 
				#删除所有没有被使容器使用过的镜像文件(docker ps -a)，包括没有被使用过的标签(docker tag )。
			-f #强制删除镜像，不用进行确认。【不进行确认】
```

* 创建镜像
1.基于已有容器创建
```bash
[root@dc07473f0a41 /]# exit    #进入容器做了修改之后，退出。容器id就是dc07473f0a41
docker commit [容器id] [新的镜像名]	#创建新的镜像
			# docker commit dc07473f0a41 test0.1
			-m  "add a new file"   #提交信息
			-a    "tony"	#作者信息
docker images  #查看新的镜像
		#REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
		#test0.1             latest              55c51323fc5e        4 seconds ago       220MB
```

2.基于本地模板导入
```bash
可以使用 OpenVZ 提供的模板来创建,或者用其他已导出的镜像模板来创建
cat ubuntu-18.04-x86_64-minimal.tar.gz I docker import - ubuntu:lB.04
```
3.基于Dockerfile创建。最常见。

* **导出和导入镜像**
```bash
docker save -o 镜像名.tar  images	#把镜像导出保存为本地的压缩文件。
docker load -i 镜像名.tar  #把本地压缩文件导入到docker镜像列表中。
```
* 上传镜像



 [docker坑](https://blog.csdn.net/wsscy2004/article/details/25878363)


