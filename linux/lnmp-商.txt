nginx:
同步与异步:
同步:

#程序运行的用户及其用户组
user nginx nginx;

#指定nginx启动的worker进程的数量，通常按照cpu核心数目来设定。auto表示自动设定。
worker_processes auto;

#全局错误日志
error_log /home/wwwlogs/nginx_error.log crit;

#主进程PID保存文件



nginx:
ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx

mysql:
cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWIDTH_MEMORY_STORAGE_ENGINE=1 -DWIDTH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_USER=mysql -DMYSQL_TCP_PORT=3306

php:
./configure --prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/ --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-soap --enable-mbstring=all --enable-sockets --with-pdo-mysql=/usr/local/mysql --with-gd --without-pear --enable-fpm

nginx实验:
1.nginx的状态统计。
##在编译nginx时,需要将--with-http_stub_status_module模块开启
在要访问的server标签中添加如下内容:
location /nginx_status{
	stub_status on;  开启状态统计
	access_log off; 不计入日志
}
测试:http://ip/nginx_status 

字段解释:
	Active connections 表示当前活动连接数
	server accepts handled requests 表示已经处理的连接信息。依次表示:已处理的连接数、成功的TCP握手次数、已处理的请求数
	
2. 目录保护。
##在访问nginx_status页面时，需要输入用户名和密码认证之后，才能访问。
在要访问的Server标签中添加如下内容:
location /nginx_status{
	stub_status on;
	access_log off;
	#在实验1上添加如下内容
	auth_basic "welcome to nginx_status!";
	auth_basic_user_file /usr/local/nginx/html/htpasswd.nginx;
}

使用htpasswd命令创建用户密码文件
yum install httpd -y 
htpasswd -c /usr/local/nginx/html/htpasswd.nginx user1 #创建user1用户及其密码

3.基于IP的身份认证(访问控制)
##允许那些IP可以访问，那些IP不能访问
在要访问的Server标签中添加如下内容:
location /nginx_status{
	stub_status on;
	access_log off;
	auth_basic "welcome to nginx_status";
	auth_basic_user_file /usr/local/nginx/html/htpasswd.nginx;
	#实验2上添加如下内容:
	allow 192.168.88.1 ;  #表示仅允许192.168.88.1访问服务器
	deny 192.168.88.0/24;
}

4.基于域名的虚拟主机
#设置好两个网站的域名与ip解析。
vim /etc/hosts
	192.168.2.10 bbs.pwall.icu
	192.168.2.10 blog.pwall.icu

#创建两个网站的根目录
mkdir /usr/local/nginx/html/blog 
mkdir /usr/local/nginx/html/bbs 

#在nginx主配置文件中并列编写两个Server标签。一个server标签就是一个网站。
vim /usr/local/nginx/conf/nginx.conf
	server{
		listen 80;
		server_name blog.pwall.icu; #blog网站的域名
		index index.html index.htm index.php;
		root html/blog; #blog网站的根目录
		access_log logs/blog-access.log main; #mian表示日志类型。
	
	}
	
	server{
		listen 80;
		server_name bbs.pwall.icu;
		index index.html,index.htm,index.php;
		root html/bbs;
		access_log logs/bbs-access.log main;
	}

5. nginx的反向代理
代理:代理对象时客户端。代替客户端去访问服务器。
反向代理:代理对象是服务器。代替服务器给客户端返回数据。
server a(192.168.2.100)：
	yum install -y httpd 
	echo "test httpd" > /var/www/html/index.html 
	systemctl start httpd
	systemctl enable httpd
	iptables -F

在nginx服务器的配置文件的一个server标签内添加如下:
location /{
	proxy_pass http://192.168.2.100:80;  #此处填写被代理的apache服务器。
}

6.负载均衡(负载调度) ???????????????????????????????
6.1使用默认的rr轮询算法。
#修改nginx主配置文件,在Server标签"前"添加:
upstream bbs{
	server 192.168.2.100:80;
	server 192.168.2.101:80;
}
server{
	........;
	proxy_pass http://bbs; #修改反向代理
	proxy_set_header Host $host; #重写请求头,保证网站的所有页面都可访问成功。
}

6.2 rr算法实现加权轮询
upstream bbs{
	server 192.168.2.100:80 weight=1;
	server 192.168.2.101:80 weight=2;
}

7.nginx实现https{证书+rewrite}
