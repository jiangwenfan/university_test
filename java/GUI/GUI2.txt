4.鼠标移动到按钮上，更改背景颜色。
Frame f = new Frame("更改颜色");
f.setBounds(400,200,400,300);
f.setLayout(new FlowLayout());

//创建4个按钮:
final Button redButton = new Button("红色");

f.add(readButton);

f.addWindowListener(new WindowAdapter()){
	@Override
	public void windowClosing(WindowEvent e){
		System.exit(0);
	}
}
//给按钮添加事件
redButton.addActionListener(new ActionListener(){
	@Override
	public void actionPerformed(ActionEvent e){
		//对按钮添加动作事件
		//f.setBackground(Color.RED);  //通过Color类获取颜色常量值
	}
})
//对按钮添加鼠标点击事件。 效果和上面的动作事件一样。
redButton.addMouseListener(new MouseAdapter(){
	@Override
	public void mouseClicked(MouseEvent e){
		//f.setBackground(Color.RED);
	}
})
//对按钮添加鼠标进入事件。鼠标放在按钮上，就变颜色。
redButton.addMouseListener(new MouseAdapter(){
	@Override
	public void mouseEntered(MouseEvent e){
		f.setBackground(Color.RED);
	}
})
//鼠标离开恢复原来的颜色。鼠标离开按钮就恢复原来的颜色。
redButton.addMouseListener(new MouseAdapter(){
	@Override
	public void mouseExited(MouseEvent e){
		f.setBackground(Color.WHITE);
	}
})
f.setVisible(true);

5.控制文本框只能输入数字
frame f = new frame("文本框只能输入数字");
f.setBounds(400,200,400,300);
f.setLayout(new FlowLayout());

//创建label对象和text对象
Label label = new Label("输入QQ号码，只能输入数字:");
TextField tf = new TextField(40);

f.addWindowListener(new WindowAdapter(){
	@Override
	public void windowClosing(WindowAdapter e){
		System.exit(0);
	}
})

//对文本框添加键盘输入事件
tf.addKeyListened(new KeyAdapter(){
	@Override
	public void keyPressed(KeyEvent e){
		//取消非数字字符的事件。默认从键盘输入一个字符就会产生一个事件，不进行任何干预的情况下直接输出到屏幕。
		//现在通过键盘事件对象e,使用getKeyChar()方法获得输入的每一个事件,判断如果这个键盘事件不在0和9之间，也就是不是数字，那么就取消这个键盘事件在屏幕上的显示。
		//如果取得的字符不是数字字符，那么就取消事件。
		char ch = e.getKeyChar(); //从键盘事件对象中获取字符的输入
		System.out.println(ch); //显示
		if(!(ch >= '0' && ch <='9')){
			e.consume();
		}
	}
})

f.setVisible(true);

6.一级菜单
灰色的那一栏叫做菜单栏，每个项目叫做菜单，每个项目中的子项目功能模块叫做菜单项。
MenuComponent
MenuBar 菜单栏
MenuItem 菜单项(最低级) ,Menu 菜单

      Frame f = new Frame("一级菜单");
        f.setBounds(600,200,400,300);
        f.setLayout(new FlowLayout());

        //创建菜单栏
        MenuBar mb = new MenuBar();
        //创建菜单
        Menu m = new Menu("file");
        //创建菜单项
        MenuItem mi = new MenuItem("exit system");

        //添加按钮
        //f.add(mb);
        f.setMenuBar(mb); //窗体添加菜单栏
        mb.add(m); //菜单栏添加菜单
        m.add(mi); //菜单添加菜单项


        //设置窗体关闭
        f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                System.exit(0);
            }
        });
        //给菜单项添加事件
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                System.exit(0);
            }
        });

        f.setVisible(true);

7.多级菜单
        Frame f = new Frame("多级菜单"); //在intellij中似乎不需要用final修饰
        f.setBounds(600,300,400,300);
        f.setLayout(new FlowLayout());

        MenuBar mb = new MenuBar(); //菜单栏
        Menu m1 = new Menu("file");  //菜单
        Menu m2 = new Menu("更改名称");

        MenuItem mi1 = new MenuItem("打开记事本"); //菜单项
        MenuItem mi2 = new MenuItem("推出系统");
        MenuItem mi3 = new MenuItem("good good study");
        MenuItem mi4 = new MenuItem("day day up");
        MenuItem mi5 = new MenuItem("恢复标题");

        f.setMenuBar(mb); //添加菜单栏
        mb.add(m1); //添加菜单
        m1.add(m2); //菜单添加菜单
        m1.add(mi1); //添加菜单项
        m1.add(mi2);

        m2.add(mi3); //添加二级菜单
        m2.add(mi4);
        m2.add(mi5);

        String name = f.getTitle();  //获取到菜单名称的值

        f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                System.exit(0);
            }
        });
        mi2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                System.exit(0);
            }
        });
        mi1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                //打开记事本，使用Runtime类。并且必须要处理异常
                Runtime r = Runtime.getRuntime();
                try {
                    r.exec("notepad");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        mi3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                //内部类访问局部变量，需要final修饰。
                //f.setTitle("好好学习!"); //修改窗口标题。写死了，不好。
                f.setTitle(mi3.getLabel()); //当点击时,获取菜单项上的标题。mi3.getLabel()
            }
        });
        mi4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                f.setTitle(mi4.getLabel()); //当点击时，获取标签内容。并设置新的内容给窗体。
            }
        });
        mi5.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                f.setTitle(name); //将原始的已经获取到的窗体标题值重新拿到，并赋值给当前窗体。
            }
        });
        f.setVisible(true);


