1.android version ------ api level
2.3 10
3.0 11
4.0 14
4.1.2 16
2.常见手机的分辨率:
320*480
480*800
1280*700
3.android系统的架构
4.打包流程:
编译-->class-->dex文件-->打包(aapt)生成一个apk文件--->adb调试桥--->devices
5.常见adb指令
6.
电话拨号器 意图对象Intent
电话拨号器四种点击事件
android中的五大布局

1.单元测试

单元测试配置:
在清单文件中配置下面两个标签，如果忘记怎么配置，可以新建一个android Test Project，随后选择要测试android project，然后完成。在生成的android test Project中找到清单文件，找到需要的两个标签复制粘贴到自己的Android项目中。
<application
	........
>
	<uses-library android:name="android.test.runner" />  配置单元测试的函数库
	........
</application>

//放在<application>的外面。
<instrumentation 
android:name="android.test.InstrumentationTestRunner"
android:targetPackage="cn.itcast.action"  改为当前的包
android:label="Test for My App" 无所谓可去掉
/>

在src/包名/下创建一个Calc.java，创建一个两个数相加的方法。
public int add(int x,int y){
	return x+y;
}
//传统的测试方法，是错误的，是调用的jvm虚拟机。
在Src/包名下创建一个Test.java，用来测试Calc.java这个相加的方法。
public class Test{
	public static void main(String[] args){
		System.out.println("哈哈");  //完全不能运行
	}
}
//android的测试方法，是正确的，调用的是dvm虚拟机
创建一个src/包名/CalcTest.java，并且继承自AndroidTestCase
import android.test.AndroidTestCase;
public class CalcTest extends AndroidTestCase{
		//写测试方法
		public void testAdd(){
			Calc calc = new Calc();
			int result = calc.add(5,3)
			//断言。第一个参数是期望的值，第二个参数是实际调用方法得来的值。
			assertEquals(8,result);
		}
}
在这个测试类上右键使用Run As --> Android JUnit Test 。模拟器必须打开，进度条绿色表示成功。

2.logCat使用:
创建一个新项目，

private static final String tag = "MainActivity";  //用来类名来表示日志的输出名称。定义一个常量表示这个类名。

在onCreate(){
	.....
	这个Log类需要被导入
	Log.v(tag,"我是v级别");    ---蓝色
	Log.i(tag,"我是info级别")；----绿色
	Log.d(tag,"我是debug级别"); ----黑色
	Log.w(tag,"我是warn级别"); ----黄色
	Log.e(tag,"我是error级别"); ---红色
	System.out.println("哈哈哈日志。。。");
}
Logcat中的日志有系统日志和各个android project的日志，默认创建一个android porject会创建一个针对于该项目的过滤器。
自己定义一些过滤器：filter name也就是过滤器的名字可以随便写；by Log Tag这个填写日志中的Tag标签下的名字，一般通过System.out.println()打印出来的标签是System.out

3.登录案列:
et_name
