```bash
@echo off	#关闭回显。
#关闭命令本身的回显，不会显示后面执行的命令的本身。  
@echo on 	#开启回显。	
#显示后面的任何命令本身；包括注释。

echo	#显示当前echo的状态。
echo.	 #输出空行。
#.紧跟在echo的后面；.可以用其他任意符号替代，如:或者；等等
echo ^G	  #使喇叭鸣响，输入多个^G可以产生多声响声。【^G通过ctrl+G输入的，其他方式输入将不会被识别】
echo 答复语|命令	 #可以简化一些需要人机对话的命令。
	echo.|time	#空行做为time命令的输入。
	echo. | time    #输入空行，实现回车的效果。  echo.  |  pause
	#如：chkdsk /f;format drive;del *.*的操作。
	echo y|chkdsk/f		echo y|del *.*		echo 22:23:24.56|time
rem 12121	#注释命令，后面的内容不被执行。【会回显，与on/off有关】
:: 12111	#注释命令，【不会回显；与on/off无关】
pause 		#停止系统命令的执行并显示固定的提示内容。
#更改固定的提示语：
#echo 其他提示语 & pause > null === pause 这两个都有暂停的功能，只是提示语不一样。
				
title 新标题	#设置cmd窗口标题。
color  [背景属性][字体属性]	#设置cmd窗口的背景和文字颜色
	color 0a   #淡绿色，黑色
	color fc   #f = 亮白色，c = 淡红色  
	color 17   #1 = 蓝色  7 = 白色
	color 07	#0 = 黑色  7 = 白色
mode con cols=120 lines=40  #改变cmd窗口大小
		
echo 信息内容	#输出提示信息。
echo 文件内容 >文件名	#建立新文件
	echo hello word > 1.txt	
echo 文件内容 >>文件名	#追加文件内容
	echo hello word >> 1.bat
type 1.bat  	#显示该文件的内容



在DOS提示符下，输入{echo off}    //可以关闭DOS提示符的显示，使屏幕只留下光标。
	直到输入{echo on}	//提示符才会重新出现。




	:x 	//x为以字母数字开头的字符串，goto语句可以识别。
	:y	//y为非字母数字的特殊符号，可以起到注释作用。eg: :+
@+命令		//@字符放在命令前将关闭回显，无论此时e【cho on/off】都无关
errorlevel      //程序返回码，用于判断刚才的命令是否成功执行；【成功返回0，错误返回1】
	#echo %errorlevel%	//每个命令运行结束后，可以用这个命令行格式查看返回码，判断是否执行成功。

```

--
```bash
call  b.bat   #执行b.bat文件。直接写b.bat也可以。

#开启一个新窗口来运行另一个bat文件。
start  "new_windows"  cmd  /k  call b.bat    
	#"new_windows" 表示新打卡窗口的名字。  
	#/k  表示新窗口在执行完命令之后保持为打开状态。    /c  表示执行完就关闭窗口。
	# b.bat就是要在新窗口中执行的脚本
start   C:\Users\Administrator\AppData\Roaming\360se6\Application\360se.exe   #打卡360浏览器
timeout 3  #睡3秒,回车可以跳过。
timeout  3  /nobreak  #睡3秒，不能跳过。
```

# 拼接字符串:
set a=aaaaa
set b=bbbbb
set c=%a%%b%
echo %c%
# 截取字符串
set a=how are you
echo %a:~0,5%

参考:
https://blog.csdn.net/lyhDream/article/details/44998915





