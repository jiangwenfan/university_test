
[9,8,7,6,5,4,3,2,1]

0,1,2,3
0,1
0
#归位函数
def partition(li,left,right):
    tmp = li[left] #把数组最左边的数字进行归位。也就是数组的第一个元素。
    
    #这个执行完才表示这个要归位的数字，左边都是小于要归位的数字，右边都是大于要归位的数字，这个while循环知悉完毕，tmp归位之后才表示一趟结束，也就是说这个分区函数调用一次，就是一趟结束，总共需要递归的次数表示要排序完这个数组的趟数。
    #这个不能换成if，这个大的while没进行一次，表示右边的数字往左边放一个，左边的数字往右边放一个，如果是比较大的数组，那么左右互相放的次数会由很多次，所以只能用while循环，而不是if语句。
    #通常来说，right是一直大于left的，但是left和right会一直向中间移动，直到left等于right
    while left < right:
        #因为是从数组的最左边找了一个元素进行归位，所以最左边现在有一个空位，所以要从右边开始找一个小于归位元素的数，
        #因为右边的数都小于要归为的元素。
        #从右边找比要归为的元素(tmp)小的数。
        while left < right and li[right] >= tmp: #如果右边的数大于要归为的元素，则表示这个是完美的，不需要进行元素移动，
        #所以右边的指针进行向左移动。
        #但是，但是。如果要归为的元素是1，Right右边的数字一直大于要归为的元素，那么right会一直向左移动，直到left=right，
        #所以此时必须要跳出这个想左走的循环。通过left<right进行限定，否则right会一直向左走，一直进行right -=1，停不下来。
        #left<right是right向左走停下来的条件。
            right -= 1      # 往左走一步
       #这里就是left=right的情况，也就是left和right重合了，也就是右边的都大于要要归位的元素.li[right]和li[left]都是要归位的元素。
        #或者是li[right]<tmp的情况，也就是找到了一个小于要归位的数，将这个数字li[right]放到刚才拿出来要归为元素的空位上。
        li[left] = li[right] #把右边的值写到左边空位上
        # print(li, 'right')
        
        #从左边开始找比要归位元素大的数，找到之后放到右边的空位上。
        #所以当左边的数小于或等于要归位的数的时候，表示这些数字是符合排序要求的，所以left指针继续向右移动，
        #当left指针移动到左边的数大于要归位的元素之后，那么就跳出left向右移动的循环，将这个大于要归位元素的数字，放到右边的空位上。
        #如果left从左边走了一圈都没有找到大于要归位的元素，那么说明左边的元素都是排好序的，所以需要给一个结束条件left<right,也就是最后会出现left=rigt的情况，那么两个指针重合。
        while left < right and li[left] <= tmp:
            left += 1 #当左边的数都小于要归位的数时，left指针向有移动。
        #或者两个指针重合，自己等于自己。
        #这个就是当左边出现了大于要归位元素的数时，将这个大的元素写到右边的空位上。
        li[right] = li[left] #把左边的值写到右边空位上
        # print(li, 'left')
        
    #这个就是left等于right的时候，也就是需要归位元素的的位置。
    #将需要归位的元素，也即是数组最左边的元素，数组的第一个元素，也就是tmp,进行归位，进行放到left和right重合的下标的位置。
    li[left] = tmp      # 把tmp归位
    #将元素归位成功后，这个元素的左边都比这个元素小，这个元素的右边都比这个元素大。
    
li = [9,8,7,6,5,4,3,2,1]
print(li)
partition(li,0,len(li)-1) #归位数组的第一个元素
print(li)

快速排序思想流程:
取一个元素p(第一个元素),使元素p归位(列表被p分为两部分,左边都比p小，右边都比p大).递归排序。
5,7,4,6,3,1,2,9,8
取第一个元素5，使5归位。2,1,4,3,5,6,7,,9,8 元素5的左边都比5小，右边都比5大。
5归位之后，左边是2,1,4,3新列表，右边是6,7,9,8新列表。
2,1,4,3列表中找到一个元素2，使其归位。变成了1,2,4,3. 2的右边只有1个或0个元素了，所以是有序的，2的左边4,3是新列表，使新列表中的第一个
元素4归位，变成了3,4。同理进行递归归位6,7,9,8新列表。

归位函数思想流程:
把列表中第一个元素(最左边的元素)作为要归位的元素，把这个要归位的元素拿出来用变量进行临时存储，然后从最右边开始找
比这个要归为元素小的元素，然后找到之后，将这个元素放到要归为元素的位置，然后再从左边开始找，比要归为元素大的数，
找到之后放到刚才右边的空位上，直到左边的找数字的指针和右边找数字的指针进行重合。然后将要归位的元素放到这个指针重合的位置。

